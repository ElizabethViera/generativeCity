{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["randBetween","lo","hi","range","Math","floor","random","randChoose","options","list","length","App","ref","useRef","useEffect","container","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","document","body","appendChild","domElement","geometry","material","color","vertexColors","addCube","pos","top","left","right","top2","index","vertices","flatMap","p","add","faces","undefined","push","position","x","y","z","rotateOnAxis","Vector3","PI","i","cx","cz","size","purpleColor","greyColor","top2Color","console","log","animate","requestAnimationFrame","render","draw","current","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e62691f5.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './App.css';\nimport * as THREE from 'three';\nimport { Vector3 } from 'three';\n\nfunction randBetween(lo: number, hi: number): number {\n  const range = hi - lo + 1;\n  return Math.floor(Math.random() * range) + lo;\n}\n\nfunction randChoose<T>(options: Array<T>): T {\n  const list = [...options];\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction draw(container: HTMLElement) {\n\n\n  var scene = new THREE.Scene();\n  // var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  var camera = new THREE.OrthographicCamera(-10 * window.innerWidth / window.innerHeight, 10 * window.innerWidth / window.innerHeight, 10, -10, 0.1, 1000);\n\n  var renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n\n\n  var geometry = new THREE.Geometry();\n  var material = new THREE.MeshBasicMaterial({ color: 0xffffff, vertexColors: true });\n\n\n  camera.position.x = -8\n  camera.position.y = 8\n  camera.position.z = 18;\n  camera.rotateOnAxis(new Vector3(0, 1, 0), -Math.PI / 4)\n  camera.rotateOnAxis(new Vector3(1, 0, 0), -Math.PI / 4)\n\n\n  function addCube(pos: THREE.Vector3, { top = new THREE.Color(\"rgb(255,255,255)\"), left = new THREE.Color(\"rgb(169, 169, 169)\"), right = new THREE.Color(\"rgb(90,0,90)\"), top2 }: Partial<Record<\"top\" | \"left\" | \"right\" | \"top2\", THREE.Color>>) {\n    const size = .5;\n    const index = geometry.vertices.length;\n    const vertices = [pos]\n      .flatMap(p => [new THREE.Vector3(size, 0, 0).add(p), new THREE.Vector3(-size, 0, 0).add(p)])\n      .flatMap(p => [new THREE.Vector3(0, size, 0).add(p), new THREE.Vector3(0, -size, 0).add(p)])\n      .flatMap(p => [new THREE.Vector3(0, 0, size).add(p), new THREE.Vector3(0, 0, -size).add(p)])\n\n\n\n\n\n    const faces = [\n      // top face\n      new THREE.Face3(index + 4, index + 1, index + 5, undefined, top),\n      new THREE.Face3(index + 4, index, index + 1, undefined, top2 || top),\n\n\n      // right face\n      new THREE.Face3(index + 4, index + 2, index, undefined, right),\n      new THREE.Face3(index + 4, index + 6, index + 2, undefined, right),\n\n      // left face\n      new THREE.Face3(index + 4, index + 7, index + 6, undefined, left),\n      new THREE.Face3(index + 4, index + 5, index + 7, undefined, left),\n    ]\n\n    geometry.vertices.push(...vertices);\n    geometry.faces.push(...faces);\n\n  }\n\n\n  // geometry.vertices = [new THREE.Vector3(-2, 3), new THREE.Vector3(2, -3), new THREE.Vector3(1, 2)]\n  // geometry.faces = [new THREE.Face3(0, 1, 2)]\n\n  for (let x = -25; x <= 20; x++) {\n    for (let z = -15; z <= 35; z++) {\n      const rr = randBetween(210, 225)\n      const rg = randBetween(210, 225)\n      const rb = randBetween(210, 225)\n      const color = \"rgb(\" + rr + \", \" + rg + \", \" + rb + \")\"\n\n      addCube(new THREE.Vector3(x, 0, z), { top: new THREE.Color(color) });\n    }\n  }\n\n  for (let i = 0; i < 80; i++) {\n    const cx = randBetween(-7, 8);\n    const cz = randBetween(0, 8);\n    const size = randChoose([1, 1, 1, 1, 1, 3]);\n    for (let x = cx - size; x <= cx + size; x++) {\n      for (let z = cz - size; z <= cz + size; z++) {\n        for (let y = 1; y <= 2 * size + 1; y++) {\n          if ((x === cx || z === cz) && y < size + 1) {\n            continue;\n          }\n          const rr = randBetween(230, 245) + y\n          const rg = randBetween(230, 245) + y\n          const rb = randBetween(230, 245) + y\n          const color = \"rgb(\" + rr + \", \" + rg + \", \" + rb + \")\"\n\n          const purpler = randBetween(100, 135)\n          const purpleg = randBetween(0, 10)\n          const purpleb = randBetween(100, 115)\n          const purpleColor = \"rgb(\" + purpler + \", \" + purpleg + \", \" + purpleb + \")\"\n\n          const greyr = randBetween(25, 35)\n          const greyg = randBetween(20, 35)\n          const greyb = randBetween(25, 40)\n          const greyColor = \"rgb(\" + greyr + \", \" + greyg + \", \" + greyb + \")\"\n\n\n          const top2r = randBetween(230, 245) + y\n          const top2g = randBetween(230, 245) + y\n          const top2b = randBetween(230, 245) + y\n          const top2Color = \"rgb(\" + top2r + \", \" + top2g + \", \" + top2b + \")\"\n\n          addCube(new THREE.Vector3(x, y, z), { left: new THREE.Color(greyColor), right: new THREE.Color(purpleColor), top: new THREE.Color(color), top2: new THREE.Color(top2Color) });\n        }\n      }\n    }\n  }\n\n\n  //geometry.vertices = [new THREE.Vector3(-2, 3), new THREE.Vector3(2, -3), new THREE.Vector3(1, 2)]\n  // geometry.faces = [new THREE.Face3(0, 1, 2)]\n\n  console.log(geometry.vertices, geometry.faces)\n  scene.add(new THREE.Mesh(geometry, material))\n  var animate = function () {\n    requestAnimationFrame(animate);\n\n\n    renderer.render(scene, camera);\n  };\n\n  animate();\n\n}\n\n\nfunction App() {\n  const ref = useRef<HTMLDivElement>(null as any)\n  useEffect(() => {\n    draw(ref.current);\n  }, [ref])\n  return <div ref={ref} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}